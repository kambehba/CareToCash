
@page "/"

@using System.Net.Http;
@using Services;
@using Models;

@using System.Text.Json;
@using System.Text.Json.Serialization;

@inject HttpClient Http;
@inject UserService userService;


    <div class="container">

        <h1 class="g0">Care To Cash</h1>

        <h3 class="g1">Select Member:</h3>

        <select class="g2" @bind="_selectdUserId">

            @for (int i = 0; i < _users.Count; i++)
            {
                <option value="@_users[i].id">@_users[i].name</option>
            }
        </select>

        <button class="g3 btn-info" @onclick="GetUserById">Send</button>

        <h1 class="g4 @showhide">@_selectedUser</h1> <h1 class="g5">@ff</h1>

        <h3 class="g6 @showhide">Cares Avilable:</h3>
        <div class="g7 @showhide">

            @for (int i = 0; i < _cares_NotAssigned.Count; i++)
            {
                <button class="btn-success">Add</button>
                <label>@_cares_NotAssigned[i].care  $ @_cares_NotAssigned[i].careValue</label>
                <br /> <hr>
            }


        </div>

        <h3 class="g8 @showhide">Cares Assigned:</h3>
        <div class="g9 @showhide">

            @for (int i = 0; i < _cares_Assigned.Count; i++)
            {
                <button class="btn-success">Remove</button>
                <label>@_cares_Assigned[i].care: $ @_cares_Assigned[i].careValue</label>
                <br /> <hr>
            }
        </div>

        <h3 class="g10 @showhide">Cares Completed:</h3>
        <div class="g11 @showhide">

            @for (int i = 0; i < _cares_Completed.Count; i++)
            {

                <label>@_cares_Completed[i].care: $ @_cares_Completed[i].careValue</label>
                <br /> <hr>
            }
        </div>

        <h3 class="g12 @showhide">CHARGES:</h3>
        <div class="g13 @showhide">

            @for (int i = 0; i < _charges.Count; i++)
            {
                <label>@_charges[i].charge: $ @_charges[i].ChargeValue</label>
                <br /> <hr>
            }
        </div>

    </div>


@code{

    private string showhide = "hide";

    private string _selectedUser = "";

    private int _selectdUserId = 0;
    private string ff = string.Empty;
    private List<string> ew = new List<string>();
    private List<User> _users;
    private List<Charge> _charges;
    private List<Care> _cares;
    private List<Care> _cares_NotAssigned;
    private List<Care> _cares_Assigned;
    private List<Care> _cares_Completed;

    protected override async Task OnInitializedAsync()
    {
        // _users = new List<User>();
        await RefreshCustomerList();
        //  await GetChargesById(0);
    }

    private void dothis2(string h)
    {
        _selectedUser = h;
    }

    private async Task RefreshCustomerList()
    {
        _users = new List<User>();
        _charges = new List<Charge>();
        _cares = new List<Care>();

        _cares_NotAssigned = new List<Care>();
        _cares_Assigned = new List<Care>();
        _cares_Completed = new List<Care>();

        _users = await Http.GetJsonAsync<List<User>>("https://us-central1-dazzling-torch-8270.cloudfunctions.net/appFunctions/getUsers");
        _charges = await Http.GetJsonAsync<List<Charge>>("https://us-central1-dazzling-torch-8270.cloudfunctions.net/appFunctions/getCharges");
        _cares = await Http.GetJsonAsync<List<Care>>("https://us-central1-dazzling-torch-8270.cloudfunctions.net/appFunctions/getCares");


        UpdateCares_NotAssigned();
        UpdateCares_Assigned();
        UpdateCares_Completed();



        // ff = _charges[0].charge;
        StateHasChanged();
    }

    private void UpdateCares_NotAssigned()
    {
        _cares_NotAssigned.Clear();
        foreach (var item in _cares)
        {
            if (item.status == 1)
            {
                _cares_NotAssigned.Add(item);
            }
        }
    }

    private void UpdateCares_Assigned()
    {
        _cares_Assigned.Clear();
        foreach (var item in _cares)
        {
            if (item.status == 2)
            {
                _cares_Assigned.Add(item);
            }
        }
    }

    private void UpdateCares_Completed()
    {
        _cares_Completed.Clear();
        foreach (var item in _cares)
        {
            if (item.status == 3)
            {
                _cares_Completed.Add(item);
            }
        }
    }

    private void GetUserById()
    {
        var h = _users.Where(x => x.id == _selectdUserId).FirstOrDefault();
        _selectedUser = h.name;
        ff = "$" + h.cash.ToString();

        showhide = "show";

    }


}







